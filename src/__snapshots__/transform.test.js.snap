// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transform handles empty attributes 1`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
}"
`;

exports[`transform prints attribute type declaration 1`] = `
"interface TestAttributes {
    readonly stringAttribute?: string;
    readonly numberAttribute?: number;
    readonly booleanAttribute?: boolean;
    readonly arrayAttribute?: Array<any>;
    readonly objectAttribute?: Record<string, any>;
    readonly randomAttribute?: any;
    readonly objectAttributeWithDefault: Record<string, any>;
    readonly integerAttribute?: number;
    readonly nullAttribute?: null;
    readonly unionTypeAttribute?: string | number;
    readonly enumTypeAttribute?: "foo" | "bar";
    readonly nullableAttribute?: string | null;
    readonly enumTypeAttributeWithoutType?: "foo" | "bar" | false | 1000 | Record<string, any>;
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
}"
`;

exports[`transform prints attributes generated by supports 1`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly align?: "left" | "center" | "right" | "wide" | "full" | "";
}"
`;

exports[`transform prints attributes generated by supports 2`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly align?: "wide" | "full" | "";
}"
`;

exports[`transform prints attributes generated by supports 3`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly align?: "left" | "right" | "";
}"
`;

exports[`transform prints attributes generated by supports 4`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly anchor?: string;
}"
`;

exports[`transform prints attributes generated by supports 5`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
}"
`;

exports[`transform prints attributes generated by supports 6`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly ariaLabel?: string;
}"
`;

exports[`transform prints attributes generated by supports 7`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly textColor?: string;
}"
`;

exports[`transform prints attributes generated by supports 8`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly textColor?: string;
}"
`;

exports[`transform prints attributes generated by supports 9`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly backgroundColor?: string;
}"
`;

exports[`transform prints attributes generated by supports 10`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly backgroundColor?: string;
}"
`;

exports[`transform prints attributes generated by supports 11`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly backgroundColor?: string;
    readonly textColor?: string;
}"
`;

exports[`transform prints attributes generated by supports 12`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly lock: Record<string, any>;
    readonly className?: string;
    readonly backgroundColor?: string;
    readonly textColor?: string;
    readonly gradient?: string;
}"
`;

exports[`transform prints attributes generated by supports 13`] = `
"interface TestAttributes {
    readonly style?: Record<string, any>;
    readonly className?: string;
}"
`;

exports[`transform prints block context type declaration 1`] = `
"interface TestContext {
}"
`;

exports[`transform prints block type declaration 1`] = `
"interface TestBlock {
    readonly name: string;
    readonly isSelected: boolean;
    readonly isSelectionEnabled: boolean;
    readonly clientId: string;
    readonly attributes: TestBlockAttributes;
    readonly context: undefined;
    setAttributes(attributes: Partial<TestBlockAttributes>): void;
    insertBlocksAfter(block: any): void;
    mergeBlocks(blocks: Array<any>): void;
    onRemove(callback: any): void;
    onReplace(callback: any): void;
    toggleSelection(): void;
    [key: string]: any;
}"
`;
